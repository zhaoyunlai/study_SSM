<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zylai.mybatis.mapper.EmpMapper">


    <!--Emp getEmpByEmpId(@Param("empId") Integer empId);-->
    <!--
        处理字段名和属性名不一致的情况，如何处理映射关系
        1、为查询的字段设置别名，和属性名保持一致 （一般不用）
        2、当字段符合mysql的要求使用_,而属性符合java要求使用驼峰
        此时可以在mybatis的核心配置文件中设置一个全局配置，
        可以自动将下划线映射为驼峰
        emp_id:empId,emp_name:empName
        3、使用resultMap自定义处理映射
     -->

    <!--
        resultMap：自定义的映射关系
        id：唯一标识
        type：处理映射关系的实体类的类型
        使用了resultMap就需要把每个映射关系都写出来
       常用的标签：
       id：处理主键和实体类中属性的映射关系
       result：处理普通字段和实体类中属性的映射关系
       association：处理多对一的映射关系（处理实体类类型的属性）
       collection：处理一对多的映射关系（处理集合类型的属性）
       column：设置映射关系中的字段名，必须是SQL查询出的某个字段
       property：设置映射关系中的属性的属性名，必须是处理的实体类类型中的属性名
    -->
    <resultMap id="empResultMap" type="Emp">
        <id column="emp_id" property="empId"/>
        <result column="emp_name" property="empName"/>
        <result column="age" property="age"/>
        <result column="gender" property="gender"/>
    </resultMap>
    <select id="getEmpByEmpId" resultMap="empResultMap">
        select * from t_emp where emp_id = #{empId}
    </select>
    <select id="getEmpByEmpIdOld" resultType="Emp">
        select * from t_emp where emp_id = #{empId}
    </select>

    <!--
    多对一的情况
        处理多对一的映射方法
        1.级联的方式
        2.association
        3.分步查询
    -->
    <!--1.级联-->
    <resultMap id="empAndDeptResultMapOne" type="Emp">
        <id column="emp_id" property="empId"/>
        <result column="emp_name" property="empName"/>
        <result column="age" property="age"/>
        <result column="gender" property="gender"/>
        <result column="dept_id" property="dept.deptId"/>
        <result column="dept_name" property="dept.deptName"/>
    </resultMap>

    <!--2.association-->
    <resultMap id="empAndDeptResultMap" type="Emp">
        <id column="emp_id" property="empId"/>
        <result column="emp_name" property="empName"/>
        <result column="age" property="age"/>
        <result column="gender" property="gender"/>
        <!--
            association：处理实体类类型的属性
            property：设置需要处理映射关系的属性的属性名
            JavaType：表示要处理属性的类型，使用别名
        -->
        <association property="dept" javaType="Dept">
            <id column="dept_id" property="deptId"/>
            <result column="dept_name" property="deptName"/>
        </association>
    </resultMap>
    <!--Emp getEmpAndDeptByEmpId(@Param("empId") Integer empId);-->
    <select id="getEmpAndDeptByEmpId" resultMap="empAndDeptResultMap">
        select *
        from t_emp
        left join t_dept on t_emp.dept_id = t_dept.dept_id
        where emp_id = #{empId}
    </select>

    <!--3.分步-->
    <resultMap id="empAndDeptByStepResultMap" type="Emp">
        <id column="emp_id" property="empId"/>
        <result column="emp_name" property="empName"/>
        <result column="age" property="age"/>
        <result column="gender" property="gender"/>
        <!--
            fetchType：在开启延迟加载的环境中，指定当前的sql是延迟加载还是立即加载
                       eager表示立即加载，lazy表示懒加载；默认是lazy
            property：设置需要处理映射关系的属性的属性名
            select：设置分步查询的SQL的唯一标识
            column：将查询出来的某个字段作为分布查询的SQL条件
        -->
        <association fetchType="lazy"
                     property="dept"
                     select="com.zylai.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo"
                     column="dept_id">
        </association>
    </resultMap>

    <!--Emp getEmpAndDeptByStepOne(@Param("empId") Integer empId);-->
    <select id="getEmpAndDeptByStepOne" resultMap="empAndDeptByStepResultMap">
        select * from t_emp where emp_id = #{empId}
    </select>

    <!--查部门信息，分步的第二步-->
    <!--List<Emp> getDeptAndEmpByStepTwo(@Param("deptId") Integer deptId);-->
    <select id="getDeptAndEmpByStepTwo" resultType="Emp">
        select * from t_emp where dept_id = #{deptId}
    </select>
</mapper>